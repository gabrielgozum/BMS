/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKDTC_H
#define _MOCKDTC_H

#include "dtc.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockdtc_Init(void);
void Mockdtc_Destroy(void);
void Mockdtc_Verify(void);




#define dtc_send_general_Ignore() dtc_send_general_CMockIgnore()
void dtc_send_general_CMockIgnore(void);
#define dtc_send_general_Expect(fault_code, state) dtc_send_general_CMockExpect(__LINE__, fault_code, state)
void dtc_send_general_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state);
#define dtc_send_8bit_Ignore() dtc_send_8bit_CMockIgnore()
void dtc_send_8bit_CMockIgnore(void);
#define dtc_send_8bit_Expect(fault_code, state, data) dtc_send_8bit_CMockExpect(__LINE__, fault_code, state, data)
void dtc_send_8bit_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state, uint8_t data);
#define dtc_send_16bit_Ignore() dtc_send_16bit_CMockIgnore()
void dtc_send_16bit_CMockIgnore(void);
#define dtc_send_16bit_Expect(fault_code, state, data) dtc_send_16bit_CMockExpect(__LINE__, fault_code, state, data)
void dtc_send_16bit_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state, uint16_t data);
#define dtc_send_cell_Ignore() dtc_send_cell_CMockIgnore()
void dtc_send_cell_CMockIgnore(void);
#define dtc_send_cell_Expect(fault_code, state, cell) dtc_send_cell_CMockExpect(__LINE__, fault_code, state, cell)
void dtc_send_cell_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state, uint8_t cell);
#define dtc_send_cell_8bit_Ignore() dtc_send_cell_8bit_CMockIgnore()
void dtc_send_cell_8bit_CMockIgnore(void);
#define dtc_send_cell_8bit_Expect(fault_code, state, cell, data) dtc_send_cell_8bit_CMockExpect(__LINE__, fault_code, state, cell, data)
void dtc_send_cell_8bit_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state, uint8_t cell, uint8_t data);
#define dtc_send_cell_16bit_Ignore() dtc_send_cell_16bit_CMockIgnore()
void dtc_send_cell_16bit_CMockIgnore(void);
#define dtc_send_cell_16bit_Expect(fault_code, state, cell, data) dtc_send_cell_16bit_CMockExpect(__LINE__, fault_code, state, cell, data)
void dtc_send_cell_16bit_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t fault_code, dtc_state_e state, uint8_t cell, uint16_t data);
#define dtc_update_tick_hp_Ignore() dtc_update_tick_hp_CMockIgnore()
void dtc_update_tick_hp_CMockIgnore(void);
#define dtc_update_tick_hp_Expect() dtc_update_tick_hp_CMockExpect(__LINE__)
void dtc_update_tick_hp_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define dtc_get_update_hp_IgnoreAndReturn(cmock_retval) dtc_get_update_hp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dtc_get_update_hp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dtc_get_update_hp_ExpectAndReturn(cmock_retval) dtc_get_update_hp_CMockExpectAndReturn(__LINE__, cmock_retval)
void dtc_get_update_hp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dtc_set_update_hp_Ignore() dtc_set_update_hp_CMockIgnore()
void dtc_set_update_hp_CMockIgnore(void);
#define dtc_set_update_hp_Expect(flag) dtc_set_update_hp_CMockExpect(__LINE__, flag)
void dtc_set_update_hp_CMockExpect(UNITY_LINE_TYPE cmock_line, bool flag);
#define dtc_update_tick_lp_Ignore() dtc_update_tick_lp_CMockIgnore()
void dtc_update_tick_lp_CMockIgnore(void);
#define dtc_update_tick_lp_Expect() dtc_update_tick_lp_CMockExpect(__LINE__)
void dtc_update_tick_lp_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define dtc_get_update_lp_IgnoreAndReturn(cmock_retval) dtc_get_update_lp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dtc_get_update_lp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dtc_get_update_lp_ExpectAndReturn(cmock_retval) dtc_get_update_lp_CMockExpectAndReturn(__LINE__, cmock_retval)
void dtc_get_update_lp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dtc_set_update_lp_Ignore() dtc_set_update_lp_CMockIgnore()
void dtc_set_update_lp_CMockIgnore(void);
#define dtc_set_update_lp_Expect(flag) dtc_set_update_lp_CMockExpect(__LINE__, flag)
void dtc_set_update_lp_CMockExpect(UNITY_LINE_TYPE cmock_line, bool flag);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
